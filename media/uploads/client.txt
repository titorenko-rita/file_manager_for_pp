#include <windows.h>
#include <stdio.h>
#include <tchar.h>
#include <locale.h>
#include <iostream>
#include <fcntl.h>
#include <io.h>
#include <cwctype>

#define BUF_SIZE 256

bool IsPasswordStrong(const wchar_t* password) {
    int len = wcslen(password);
    bool hasUpper = false, hasLower = false, hasDigit = false, hasSpecial = false;

    if (len < 8) return false;

    for (int i = 0; i < len; ++i) {
        if (iswupper(password[i])) hasUpper = true;
        else if (iswlower(password[i])) hasLower = true;
        else if (iswdigit(password[i])) hasDigit = true;
        else hasSpecial = true;
    }

    return hasUpper && hasLower && hasDigit && hasSpecial;
}

int wmain() {
    // поддержку UTF-16
    _setmode(_fileno(stdout), _O_U16TEXT);
    _setmode(_fileno(stdin), _O_U16TEXT);

    setlocale(LC_ALL, "ru-RU");

    HANDLE hMapFile;
    LPWSTR pBuf;

    hMapFile = OpenFileMappingW(FILE_MAP_ALL_ACCESS, FALSE, L"MySharedMemory");

    if (hMapFile == NULL) {
        wprintf(L"Ошибка OpenFileMapping: %d\n", GetLastError());
        return 1;
    }

    pBuf = (LPWSTR)MapViewOfFile(hMapFile, FILE_MAP_ALL_ACCESS, 0, 0, BUF_SIZE * sizeof(wchar_t));

    if (pBuf == NULL) {
        wprintf(L"Ошибка MapViewOfFile: %d\n", GetLastError());
        CloseHandle(hMapFile);
        return 1;
    }

    wprintf(L"%s\n", pBuf);

    wchar_t password[BUF_SIZE];
    wprintf(L"Введите пароль: ");
    fgetws(password, BUF_SIZE, stdin);

    // Удаляем символ новой строки
    size_t len = wcslen(password);
    if (len > 0 && password[len - 1] == L'\n') {
        password[len - 1] = L'\0';
    }

    if (IsPasswordStrong(password)) {
        wcscpy_s(pBuf, BUF_SIZE, L"Пароль надёжный.");
    }
    else {
        wcscpy_s(pBuf, BUF_SIZE, L"Пароль ненадёжный.");
    }

    UnmapViewOfFile(pBuf);
    CloseHandle(hMapFile);

    return 0;
}
